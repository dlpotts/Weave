<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:managers="weave.editors.managers.*"
	     >
	<mx:Script>
		<![CDATA[
			import mx.controls.CheckBox;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.DataTypes;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.services.IWMSService;
			import weave.api.ui.IPlotter;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.SessionManager;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.AttributeColumns.ReprojectedGeometryColumn;
			import weave.editors.SimpleAxisEditor;
			import weave.editors.WindowSettingsEditor;
			import weave.editors.managers.CustomLayerWindow;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.SubMenu;
			import weave.ui.VariableListController;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.InteractionController;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.plotters.AbstractGlyphPlotter;
			import weave.visualization.plotters.GeometryLabelPlotter;
			import weave.visualization.plotters.GeometryPlotter;
			import weave.visualization.plotters.GeometryRelationPlotter;
			import weave.visualization.plotters.ScatterPlotPlotter;
			import weave.visualization.plotters.SingleImagePlotter;
			import weave.visualization.plotters.WMSPlotter;

			WeaveAPI.registerImplementation(IVisTool, MapTool, "Map");
			
			protected static const locationsList:Array = [lang("Top left"), lang("Top right"), lang("Bottom left"), lang("Bottom right")];
			public const maptoolsLocation:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleLocationChange, true);
			private const visibleScaleController:VariableListController = newDisposableChild(this, VariableListController);
			
			// no main plotter
			override protected function get mainPlotter():IPlotter { return null; }
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			private var selectionSubMenu:SubMenu;
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Choose Data"];
			}
			override public function getSelectableAttributes():Array
			{
				return [colorColumn];
			}
			
			/**
			 * This function moves the overview window in front of the visualization
			 */
			private function bringOverviewToTop():void
			{
				children.setNameOrder([OVERVIEW_PANEL_NAME]);
			}
			
			/**
			 * This is the projection of the map visualization.
			 */
			public const projectionSRS:LinkableString = registerLinkableChild(this, new LinkableString(null, projectionVerifier));
			// this function returns true if the projection SRS code is acceptable
			private function projectionVerifier(srs:String):Boolean
			{
				// allow no projection
				if (srs == null || srs == '')
					return true;
				return WeaveAPI.ProjectionManager.projectionExists(srs);
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			// the keys in this Dictionary are LinkableStrings that have been linked to projectionSRS.
			private var _linkedProjectionVariablesLookup:Dictionary = new Dictionary(true);
			[Bindable] private var _projComboBoxData:Array = [];
			
			/**
			 * This function links the MapTool.projectionSRS variable with another LinkableString.
			 */
			private function linkProjection(otherVariable:LinkableString):void
			{
				if (_linkedProjectionVariablesLookup[otherVariable])
					return;
				_linkedProjectionVariablesLookup[otherVariable] = true;
				
				// if map tool specifies a valid projection, use map tool value as the primary value
				if (WeaveAPI.ProjectionManager.projectionExists(projectionSRS.value))
					linkSessionState(projectionSRS, otherVariable);
				else
					linkSessionState(otherVariable, projectionSRS);
			}
			
			private function handleLayerSettingsChange():void
			{
				visualization.plotManager.layerSettings.delayCallbacks();
				
				// prevent WMS layers from being selectable
				for each (var name:String in visualization.plotManager.plotters.getNames(WMSPlotter))
					visualization.plotManager.getLayerSettings(name).selectable.value = false;
				
				visualization.plotManager.layerSettings.resumeCallbacks();
			}
			private function handlePlottersChange():void
			{
				_projComboBoxData.length = 0;
				// TEMPORARY: set the selected item in the combo box because changing the data provider 
				// will reset the text field
				if (WeaveAPI.ProjectionManager.projectionExists(projectionSRS.value))
				{
					_projComboBoxData.push(projectionSRS.value);
					projComboBox.selectedItem = projectionSRS.value; 
				}
				
				var projString:String;
				
				// make sure glyph layer projections are identical
				var glyphPlotters:Array = WeaveAPI.SessionManager.getLinkableDescendants(visualization.plotManager.plotters, AbstractGlyphPlotter);
				for each (var glyphPlotter:AbstractGlyphPlotter in glyphPlotters)
				{
					linkProjection(glyphPlotter.destinationProjection);
					projString = glyphPlotter.sourceProjection.value;
					if (projString && _projComboBoxData.indexOf(projString) < 0)
						_projComboBoxData.push(projString);
				}
				
				// make sure wms layer projections are identical
				var wmsPlotters:Array = WeaveAPI.SessionManager.getLinkableDescendants(visualization.plotManager.plotters, WMSPlotter);
				for each (var wmsPlotter:WMSPlotter in wmsPlotters)
				{
					linkProjection(wmsPlotter.srs);
					var service:IWMSService = wmsPlotter.service.internalObject as IWMSService;
					projString = service ? service.getProjectionSRS() : null;
					if (projString && _projComboBoxData.indexOf(projString) < 0)
						_projComboBoxData.push(projString);
				}
				
				// make sure all geometry column projections are identical
				var reprojectedColumns:Array = WeaveAPI.SessionManager.getLinkableDescendants(visualization.plotManager.plotters, ReprojectedGeometryColumn);
				for each (var column:ReprojectedGeometryColumn in reprojectedColumns)
				{
					linkProjection(column.projectionSRS);
					projString = column.internalDynamicColumn.getMetadata(ColumnMetadata.PROJECTION);
					if (projString && _projComboBoxData.indexOf(projString) < 0)
						_projComboBoxData.push(projString);					
				}
				
				updateProbeColumns();
			}
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [];
					// get all ReferencedColumn objects, excluding geometry columns
					var refCols:Array = WeaveAPI.SessionManager.getLinkableDescendants(visualization, ReferencedColumn);
					for each (var col:IAttributeColumn in refCols)
						if (ObjectUtil.stringCompare(ColumnUtils.getDataType(col), DataTypes.GEOMETRY, true) != 0) // non-geometry
							visualization.additionalProbeColumns.push(col);
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			override protected function get defaultPanelTitle():String
			{
				return "Map " + (colorColumn.getInternalColumn() == null ? '' : "of " + ColumnUtils.getTitle(colorColumn));
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				var backgroundImageCheck:CheckBox = new CheckBox();
				backgroundImageCheck.label = lang("Ocean background");
				linkBindableProperty(enableBackground, backgroundImageCheck, "selected");
				
				WindowSettingsEditor; // work around compiler error
				SimpleAxisEditor;
				windowEditor.addChild(backgroundImageCheck);
				windowEditor.removeChild(windowEditor.titleControls);
				windowEditor.addChildAt(axesEditor.titleControls, 0);
				
				axesEditor.parent.removeChild(axesEditor);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				// make sure WMS layers are included in the full data bounds
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.value = true;
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.lock();
				
				visualization.plotManager.enableFixedAspectRatio.value = true;
				visualization.plotManager.enableAutoZoomToExtent.value = false;
				getCallbackCollection(visualization).addGroupedCallback(this, updateZoomSlider);
				
				colorColumn.addGroupedCallback(this, handlePanelTitleChange);
				Weave.properties.toolInteractions.defaultDragMode.addGroupedCallback(this, handleMouseModeChange);
				
				visualization.plotManager.plotters.addGroupedCallback(this,handlePlottersChange,true);
				visualization.plotManager.plotters.addGroupedCallback(this,handleLayerSettingsChange,true);
				colorColumn.addGroupedCallback(this,updateProbeColumns, true);
				
				linkBindableProperty(visualization.plotManager.minZoomLevel, this, "zoomSliderMinimum");
				linkBindableProperty(visualization.plotManager.maxZoomLevel, this, "zoomSliderMaximum");
				linkBindableProperty(zoomSliderHeight, zoomSlider, 'height');
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, handleBoundsChange, true);
				
				
				
				selectionSubMenu = new SubMenu(selectModeButton, [MouseEvent.MOUSE_DOWN], [MouseEvent.MOUSE_UP]);
				
				selectionSubMenu.addSubMenuItem(lang("Rectangular Selection"),function():void{
					Weave.properties.toolInteractions.defaultDragMode.value = InteractionController.SELECT;
					Weave.properties.selectionMode.value = InteractionController.SELECTION_MODE_RECTANGLE;});
				
				selectionSubMenu.addSubMenuItem(lang("Circular Selection"),function():void{
					Weave.properties.toolInteractions.defaultDragMode.value = InteractionController.SELECT;
					Weave.properties.selectionMode.value = InteractionController.SELECTION_MODE_CIRCLE;});
				
				selectionSubMenu.addSubMenuItem(lang("Lasso Selection"),function():void{
					Weave.properties.toolInteractions.defaultDragMode.value = InteractionController.SELECT;
					Weave.properties.selectionMode.value = InteractionController.SELECTION_MODE_LASSO;});
				
				
				visibleScaleController.view = visibleScaleRangesList;
				visibleScaleController.hashMap = visualization.plotManager.layerSettings
			}
			
			private function handleMouseModeChange(event:Event = null):void
			{
				var defaultMode:String;
				if (event)
				{
					switch (event.target)
					{
						case panModeButton:
							defaultMode = InteractionController.PAN;
							break;
						default:
						case selectModeButton:
							defaultMode = InteractionController.SELECT;
							break;
						case selectModeSubtractButton:
							defaultMode = InteractionController.SELECT_REMOVE;
							break;
						case selectModeAddButton:
							defaultMode = InteractionController.SELECT_ADD;
							break;
						case zoomModeButton:
							defaultMode = InteractionController.ZOOM;
							Weave.properties.selectionMode.value = InteractionController.SELECTION_MODE_RECTANGLE; //to draw the blue rectangle
							break;
					}
					Weave.properties.toolInteractions.defaultDragMode.value = defaultMode;
				}
				defaultMode = Weave.properties.toolInteractions.defaultDragMode.value;
				
				var buttonMap:Object = {};
				buttonMap[InteractionController.PAN] = panModeButton;
				buttonMap[InteractionController.SELECT] = selectModeButton;
				buttonMap[InteractionController.SELECT_REMOVE] = selectModeSubtractButton;
				buttonMap[InteractionController.SELECT_ADD] = selectModeAddButton;
				buttonMap[InteractionController.ZOOM] = zoomModeButton;
				var selectedButton:Button = buttonMap[defaultMode];
				for each (var button:Button in buttonMap)
					button.selected = (button == selectedButton);
			}
			
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			
			private function setCenterCoords():void
			{
//				var x:Number = MathLib.toNumber(xCenterCoord.text);
//				var y:Number = MathLib.toNumber(yCenterCoord.text);
//				visualization.dataBounds.copyTo(_tempBounds);
//				_tempBounds.setCenter(x, y);
//				visualization.dataBounds.copyFrom(_tempBounds);
			}
			
			public function updateZoomSlider():void
			{
				if (zoomSlider)
				{
					currentlyUpdatingZoomSlider = true;
					scaleRangeTabZoomSlider.value = zoomSlider.value = visualization.getZoomLevel();
					currentlyUpdatingZoomSlider = false;
				}
			}
			private var currentlyUpdatingZoomSlider:Boolean = false;
			
			private function handleZoomSliderChange(event:Event):void
			{
				if (!currentlyUpdatingZoomSlider)
					visualization.setZoomLevel(event.currentTarget.value);
			}
			
			private function handleZoomInClick():void
			{
				visualization.plotManager.zoomBounds.getDataBounds(_tempBounds);
				_tempBounds.centeredResize(
					_tempBounds.getWidth() / visualization.zoomFactor.value,
					_tempBounds.getHeight() / visualization.zoomFactor.value
				);
				visualization.plotManager.setCheckedZoomDataBounds(_tempBounds);
			}
			
			private function handleZoomOutClick():void
			{
				visualization.plotManager.zoomBounds.getDataBounds(_tempBounds);
				_tempBounds.centeredResize(
					_tempBounds.getWidth() * visualization.zoomFactor.value,
					_tempBounds.getHeight() * visualization.zoomFactor.value
				);
				visualization.plotManager.setCheckedZoomDataBounds(_tempBounds);
			}
			
			private function handlePanButtonClick(xPan:Number, yPan:Number):void
			{
				var panPercent:Number = 0.3;
				
				visualization.plotManager.zoomBounds.getDataBounds(_tempBounds);
				_tempBounds.offset(
						_tempBounds.getWidth() * panPercent * xPan,
						_tempBounds.getHeight() * panPercent * yPan
					);
				visualization.plotManager.zoomBounds.setDataBounds(_tempBounds);
			}
			
			private var _tempBounds:Bounds2D = new Bounds2D();

			[Embed(source="/weave/resources/images/ocean_background2.jpg")]
			private static const BackgroundImage:Class;
			private static const backgroundImageBitmapData:BitmapData = (new BackgroundImage() as Bitmap).bitmapData;
			
			public const enableBackground:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), invalidateDisplayList);
			public const enableOverview:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateOverviewWindow);
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				visualization.graphics.clear();
				//Needs to be called on the next frame, due to the background getting cleared afterwards by the super functions.
				callLater(drawBackground);
			}
			
			private function drawBackground():void
			{
				if (enableBackground.value)
				{
					visualization.graphics.lineStyle(0,0,0);
					visualization.graphics.beginBitmapFill(backgroundImageBitmapData);
					visualization.graphics.drawRect(0, 0, visualization.width, visualization.height);
				}
			}
			
			internal function getPlotterLabel(plotter:IPlotter):String
			{
				if (!plotter)
					return '';
				
				var plotterName:String = visualization.plotManager.plotters.getName(plotter);
				var label:String = plotterName;
				var wmsPlotter:WMSPlotter = plotter as WMSPlotter
				var dgc:DynamicColumn = getDynamicGeomColumn(plotter);
				
				if (dgc)
					label += ": " + ColumnUtils.getTitle(dgc);
				else if (wmsPlotter)
					label += ": " + wmsPlotter.providerName;
				
				// get the source projection to be used in the label
				var proj:String;
				if (dgc)
				{
					proj = dgc.getMetadata(ColumnMetadata.PROJECTION);
				}
				else if (plotter is WMSPlotter)
				{
					var service:IWMSService = wmsPlotter.service.internalObject as IWMSService;
					if (service && service.getProjectionSRS())
						proj = service.getProjectionSRS();
				}
				
				if (proj)
					label += ' (' + proj + ')';
				return label;
			}
			
			private function getDynamicGeomColumn(p:IPlotter):DynamicColumn
			{
				var gp:GeometryPlotter = p as GeometryPlotter;
				if (gp)
					return gp.geometryColumn.internalDynamicColumn;
				
				var glp:GeometryLabelPlotter = p as GeometryLabelPlotter;
				if (glp)
					return glp.geometryColumn.internalDynamicColumn;
				
				var grp:GeometryRelationPlotter = p as GeometryRelationPlotter;
				if (grp)
					return grp.geometryColumn.internalDynamicColumn;
				
				var spp:ScatterPlotPlotter = p as ScatterPlotPlotter;
				if (spp)
					return spp.dataX;
				
				return null;
			}
			
			private function addGeomLayer():void
			{
				CustomLayerWindow.addPlotterAndEdit(visualization, GeometryPlotter);
			}
			
			private function addLabelLayer():void
			{
				// get existing layers before they change
				var layerNames:Array = visualization.plotManager.plotters.getNames().reverse(); // top to bottom
				// if a layer is selected in the editor, check that one first.
				if (layersEditor.selectedPlotter)
					layerNames.unshift(layersEditor.selectedPlotterName);
				
				// create new plotter
				var plotter:GeometryLabelPlotter = CustomLayerWindow.addPlotterAndEdit(visualization, GeometryLabelPlotter);
				if (!plotter)
					return;
				
				// loop through existing layers to find geometry layer that we can add corresponding labels for
				for each (var layerName:String in layerNames)
				{
					var selected:DynamicColumn = getDynamicGeomColumn(visualization.plotManager.getPlotter(layerName));
					if (selected)
					{
						copySessionState(selected, getDynamicGeomColumn(plotter));
						
						// see if there is a matching column in probe headers
						for each (var header:IAttributeColumn in ProbeTextUtils.probeHeaderColumns.getObjects())
						{
							if (ColumnUtils.getKeyType(header) == ColumnUtils.getKeyType(selected))
							{
								plotter.text.requestLocalObjectCopy(header);
								break;
							}
						}
						// stop when we found geometry layer
						break;
					}
				}
			}
			
			private function addBubbleLayer():void
			{
				// get existing layers before they change
				var layerNames:Array = visualization.plotManager.plotters.getNames().reverse(); // top to bottom
				// if a layer is selected in the editor, check that one first.
				if (layersEditor.selectedPlotter)
					layerNames.unshift(layersEditor.selectedPlotterName);
				
				// create new plotter
				var plotter:ScatterPlotPlotter = CustomLayerWindow.addPlotterAndEdit(visualization, ScatterPlotPlotter);
				if (!plotter)
					return;
				
				// set defaults
				plotter.enabledSizeBy.value = true;
				copySessionState(AttributeSelectorPanel.hack_findInternalDynamicColumn(plotter.fill.color), plotter.screenRadius);
				
				// loop through existing layers to find geometry layer that we can add corresponding labels for
				for each (var layerName:String in layerNames)
				{
					var selected:DynamicColumn = getDynamicGeomColumn(visualization.plotManager.getPlotter(layerName));
					if (selected)
					{
						copySessionState(selected, plotter.dataX);
						copySessionState(selected, plotter.dataY);
						break;
					}
				}
			}
			
			private function addRelationLayer():void
			{
				// get existing layers before they change
				var layerNames:Array = visualization.plotManager.plotters.getNames().reverse(); // top to bottom
				// if a layer is selected in the editor, check that one first.
				if (layersEditor.selectedPlotter)
					layerNames.unshift(layersEditor.selectedPlotterName);
				
				// create new plotter
				var plotter:GeometryRelationPlotter = CustomLayerWindow.addPlotterAndEdit(visualization, GeometryRelationPlotter);
				if (!plotter)
					return;
				
				// loop through existing layers to find geometry layer that we can add corresponding labels for
				for each (var layerName:String in layerNames)
				{
					var selected:DynamicColumn = getDynamicGeomColumn(visualization.plotManager.getPlotter(layerName));
					if (selected)
					{
						copySessionState(selected, getDynamicGeomColumn(plotter));
						break;
					}
				}
			}
			private function addWMSLayer():void
			{
				var oldLayerNames:Array = visualization.plotManager.plotters.getNames();

				// create new plotter
				var plotter:WMSPlotter = CustomLayerWindow.addPlotterAndEdit(visualization, WMSPlotter);
				if (!plotter)
					return;
				
				// put old layers on top
				visualization.plotManager.plotters.setNameOrder(oldLayerNames);
			}

			private function handleBoundsChange():void
			{
				// update center coordinates text boxes
				visualization.plotManager.zoomBounds.getDataBounds(_tempBounds);
				centerCoords.text = lang(
					"{x: {0}, y: {1}}",
					StandardLib.roundSignificant(_tempBounds.getXCenter(), 6),
					StandardLib.roundSignificant(_tempBounds.getYCenter(), 6)
				);
			}
			
			public var overviewPanel:MapOverviewWindow;
			private const OVERVIEW_PANEL_NAME:String = "overview";
			
			private function updateOverviewWindow():void
			{				
				if (enableOverview.value)
				{
					overviewPanel = children.requestObject(OVERVIEW_PANEL_NAME, MapOverviewWindow, false); //not locked because it should be removable
					// catercorner to the mapControls 
					if (mapControls.top == 0)
						overviewPanel.panelY.value = "75%";
					if (mapControls.left == 0)
						overviewPanel.panelX.value = "75%";
					if (mapControls.bottom == 0)
						overviewPanel.panelY.value = "0%";
					if (mapControls.right == 0)
						overviewPanel.panelX.value = "0%";

					// remove overview window from parent's session state
					(WeaveAPI.SessionManager as SessionManager).excludeLinkableChildFromSessionState(children, overviewPanel);
					linkSessionState(visualization.plotManager.layerSettings, overviewPanel.visualization.plotManager.layerSettings);
					linkSessionState(visualization.plotManager.plotters, overviewPanel.visualization.plotManager.plotters);
					overviewPanel.parentZoomBounds = visualization.plotManager.zoomBounds;
					children.addGroupedCallback(this, bringOverviewToTop);
				}
				else
				{
					children.removeObject(OVERVIEW_PANEL_NAME);
				}
			}
			
			public function addMarker(name:String,url:String,x:Number,y:Number,width:Number=NaN,height:Number=NaN):void
			{
				var marker:SingleImagePlotter = visualization.plotManager.plotters.requestObject(name, SingleImagePlotter, false);
				marker.imageURL.value = url;
				marker.dataX.value = x;
				marker.dataY.value = y;
				marker.dataWidth.value = width;
				marker.dataHeight.value = height;
			}

			public const showZoomControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const showMouseModeControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			private const _tempArray:Array = [];
			
			private function handleProjectionComboChange():void
			{
				if (UIUtils.hasFocus(projComboBox))
				{
					// clear all layer visibility settings because they are no longer valid in the new projection
					visualization.plotManager.layerSettings.delayCallbacks();
					for each (var settings:LayerSettings in visualization.plotManager.layerSettings.getObjects())
					{
						settings.minVisibleScale.value = 0;
						settings.maxVisibleScale.value = Infinity;
					}
					visualization.plotManager.layerSettings.resumeCallbacks();
				}
				if (projectionVerifier(projComboBox.text))
				{
					projValidLabel.text = lang('Valid');
					projComboBox.errorString = '';
				}
				else
				{
					projValidLabel.text = lang('Invalid');
					projComboBox.errorString = lang('Unknown projection');
				}
			}
			
			public function handleLocationChange():void 
			{
				if (!parent)
				{
					callLater(handleLocationChange);
					return;
				}
				
				mapControls.right = NaN;
				mapControls.bottom = NaN;
				mapControls.left = NaN;
				mapControls.top = NaN;
				switch (maptoolsLocation.value)
				{
					case 0:
						mapControls.top = 0;
						mapControls.left = 0;
						break;
					case 1:
						mapControls.top = 0;
						mapControls.right = 0;
						break;
					case 2:
						mapControls.bottom = 0;
						mapControls.left = 0;
						break;
					case 3:
						mapControls.bottom = 0;
						mapControls.right = 0;
						break;
				}
			}	
			
			private function locationChange():void
			{
				var index:int = maptoolLocationCombo.selectedIndex;
				if (index >= locationsList.length)
					return;
				maptoolsLocation.value = index;
			}
			
			public const zoomSliderHeight:LinkableNumber = registerLinkableChild(this, new LinkableNumber(100));
			
			// BACKWARDS COMPATIBILITY
			[Deprecated(replacement="zoomSliderHeight")] public function set sizeFactorOfMapControls(value:Number):void { zoomSliderHeight.value *= value; }
			[Deprecated(replacement="visualization.zoomToSelection")] public function get zoomToSelection():Function { return visualization.plotManager.zoomToSelection; }
		]]>
	</mx:Script>

	<mx:VBox id="mapControls"
			 	visible="{enableZoomToggle.selected}"
			 	includeInLayout="{enableZoomToggle.selected}"
				horizontalAlign="center"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				initialize="UIUtils.pad(event, 4)"
				verticalGap="4"
				backgroundColor="white" backgroundAlpha="0.01">
		
		<mx:VBox id="panControls" horizontalAlign="center" verticalGap="1"
				 visible="{zoomControlsToggle.selected}"
				 includeInLayout="{zoomControlsToggle.selected}">
			<mx:Button id="north"
						label="N"
						fillAlphas="[1.0, 1.0, 1.0, 1.0]"
						width="17" height="17" buttonMode="true"
						click="handlePanButtonClick(0,1)"
						creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
						labelPlacement="left" fontSize="10" initialize="UIUtils.pad(event, 0)" cornerRadius="0" textAlign="center"
						/>
			
			<mx:HBox horizontalGap="1">
				<mx:Button id="west"
					    label="W"
						fillAlphas="[1.0, 1.0, 1.0, 1.0]"
						width="17" height="17" buttonMode="true"
						click="handlePanButtonClick(-1,0)"
						creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
						labelPlacement="left" fontSize="10" initialize="UIUtils.pad(event, 0)" cornerRadius="0" textAlign="center"/>
				<mx:Button id="zoomToExtentButton"
						   toolTip="Click this button to zoom to map's full extent"
						   icon="@Embed(source='/weave/resources/images/zoomToExtent.png')"
						   fillAlphas="[1,1]"
						   width="17" height="17" buttonMode="true"
						   cornerRadius="0"
						   creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
						   click="visualization.zoomToSelection()"/>
				<mx:Button id="east"
					    label="E"
						fillAlphas="[1.0, 1.0, 1.0, 1.0]"
						width="17" height="17" buttonMode="true"
						click="handlePanButtonClick(1,0)"
						creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
						labelPlacement="left" fontSize="10" initialize="UIUtils.pad(event, 0)" cornerRadius="0" textAlign="center">
				</mx:Button>
			</mx:HBox>
			
			<mx:Button id="south"
						label="S"
						fillAlphas="[1.0, 1.0, 1.0, 1.0]"
						width="17" height="17" buttonMode="true"
						click="handlePanButtonClick(0,-1)"
						creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
						labelPlacement="left" fontSize="10" initialize="UIUtils.pad(event, 0)" cornerRadius="0" textAlign="center"/>
		</mx:VBox>
		
		<mx:VBox verticalGap="2"
				 initialize="UIUtils.pad(event, 2)"
				 includeInLayout="{zoomControlsToggle.selected}"
				 visible="{zoomControlsToggle.selected}"
				 backgroundColor="white" backgroundAlpha="0.85" borderStyle="outset">
			<mx:Button id="zoomIn"
					icon="@Embed(source='/weave/resources/images/zoomPlus.png')"
					fillAlphas="[1.0, 1.0, 1.0, 1.0]"
					width="17" height="17" buttonMode="true"
					click="handleZoomInClick()"
				    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 4)"
					cornerRadius="0" textAlign="center"/>
			
			<mx:VSlider id="zoomSlider"
						buttonMode="true"
						showDataTip="false"
						allowTrackClick="true"
						liveDragging="true"
						tickInterval="1"
						minimum="{zoomSliderMinimum}"
						maximum="{zoomSliderMaximum}"
						change="handleZoomSliderChange(event);"/>
			
			<mx:Button id="zoomOut"
					icon="@Embed(source='/weave/resources/images/zoomMinus.png')"
					fillAlphas="[1.0, 1.0, 1.0, 1.0]"
					width="17" height="17" buttonMode="true"
					click="handleZoomOutClick()"
				    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 4)"
					cornerRadius="0" textAlign="center"/>
		</mx:VBox>
		
		<mx:HBox id="mouseModeBox" horizontalGap="1"
				 verticalAlign="top"
				 includeInLayout="{mouseModeControlsToggle.selected}"
				 visible="{mouseModeControlsToggle.selected}"
				 backgroundColor="white" backgroundAlpha="0.01"
				 alpha="1"> 
			<mx:Button id="panModeButton" 
			    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
				icon="@Embed(source='/weave/resources/images/cursor_hand.png')"
				fillColors="{panModeButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				fillAlphas="[1,1]"
				alpha="{panModeButton.selected ? 1 : 0.5}"
				width="17" height="17" buttonMode="true"
				toggle="true"
				toolTip="{lang('Pan mode')}"
				click="handleMouseModeChange(event)" cornerRadius="0"/>
			<mx:Button id="selectModeButton"
			    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
				icon="@Embed(source='/weave/resources/images/selectMode.png')"
				fillColors="{selectModeButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				fillAlphas="[1,1]"
				alpha="{selectModeButton.selected ? 1 : 0.5}"
				width="17" height="17" buttonMode="true"
				toggle="true"
				toolTip="{lang('Selection mode')}"
				click="handleMouseModeChange(event)" cornerRadius="0"/>
			<mx:Button id="selectModeAddButton"
			    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
				icon="@Embed(source='/weave/resources/images/selectMode_add.png')"
				fillColors="{selectModeAddButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				fillAlphas="[1,1]"
				alpha="{selectModeAddButton.selected ? 1 : 0.5}"
				width="17" height="17" buttonMode="true"
				toggle="true"
				toolTip="{lang('Selection mode (add)')}"
				click="handleMouseModeChange(event)" cornerRadius="0"
				visible="false" includeInLayout="false"
				/>
			<mx:Button id="selectModeSubtractButton"
			    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
				icon="@Embed(source='/weave/resources/images/selectMode_subtract.png')"
				fillColors="{selectModeSubtractButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				fillAlphas="[1,1]"
				alpha="{selectModeSubtractButton.selected ? 1 : 0.5}" 
				width="17" height="17" buttonMode="true"
				toggle="true"
				toolTip="{lang('Selection mode (subtract)')}"
				click="handleMouseModeChange(event)" cornerRadius="0"
				visible="false" includeInLayout="false"
				/>
			<mx:Button id="zoomModeButton"
			    creationComplete="UIUtils.drawInvisibleHalo(event.target as Button, 1)"
				icon="@Embed(source='/weave/resources/images/zoomMode.png')"
				fillColors="{zoomModeButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				fillAlphas="[1,1]"
				alpha="{zoomModeButton.selected ? 1 : 0.5}"
				width="17" height="17" buttonMode="true"
				toggle="true"
				toolTip="{lang('Zoom mode')}"
				click="handleMouseModeChange(event)" cornerRadius="0"/>
		</mx:HBox>
	</mx:VBox>

	<ui:ControlPanel>
		<ui:creationComplete>
			layerControls.addChild(layersEditor);
			layersEditor.addChildAt(layerButtons, 0);
			layersEditor.removeChild(layersEditor.layerButtons);
			layerButtons.addChild(layersEditor.removeButton);
			layersEditor.visible = true;
			layersEditor.labelFunction = getPlotterLabel;
		</ui:creationComplete>
		<mx:VBox id="layerControls" label="{lang('Layers')}" width="100%" height="100%">
			<ui:Indent id="layerButtons" grouped="false" label="Add layer:" translate="true" horizontalGap="4">
				<mx:Button label="{lang('Base Map')}" click="addWMSLayer();" toolTip="{lang('Add an image layer underneath the geometries')}"/>
				<mx:Button label="{lang('Geometry')}" click="addGeomLayer();" toolTip="{lang('Add a layer of polygons, lines, or points that can be colored according to the data')}"/>
				<mx:Button label="{lang('Labels')}" click="addLabelLayer();" toolTip="{lang('Add labels to the selected geometry layer')}"/>
				<mx:Button label="{lang('Bubbles')}" click="addBubbleLayer();" toolTip="{lang('Add bubbles to the selected geometry layer')}"/>
				<mx:Button label="{lang('Other...')}" click="layersEditor.addLayer()" toolTip="{lang('Add another type of layer')}"/>
				<mx:Spacer width="100%"/>
			</ui:Indent>
		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<ui:Indent label="Projection" translate="true">
				<ui:CustomComboBox id="projComboBox"
								   dataProvider="{_projComboBoxData}"
								   creationComplete="linkBindableProperty(projectionSRS, event.target, 'text');"
								   change="handleProjectionComboChange();"
								   focusOut="projComboBox.selectedItem = projectionSRS.value; projValidLabel.text = '';"
								   editable="true"
								   width="120"
								   />
				<mx:Label id="projValidLabel" fontWeight="bold"/>
			</ui:Indent> 
			<mx:Button label="{lang('Zoom to full extent')}" click="visualization.zoomToSelection()"/>
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe, event.target, 'selected')"/>
			<ui:CheckBoxWithNestedOptions id="enableZoomToggle" label="{lang('Enable panning and zooming')}"
						 creationComplete="linkBindableProperty(visualization.enableZoomAndPan, event.target, 'selected')">
				<ui:CheckBoxWithNestedOptions id="zoomControlsToggle" label="{lang('Show zoom slider &amp; buttons')}"
							 creationComplete="linkBindableProperty(showZoomControls, event.target, 'selected')">
					<ui:Indent label="Zoom slider height" translate="true">
						<mx:NumericStepper minimum="40" maximum="200" stepSize="20" creationComplete="linkBindableProperty(zoomSliderHeight, event.target, 'value')"/>
					</ui:Indent>
				</ui:CheckBoxWithNestedOptions>
				<mx:CheckBox id="mouseModeControlsToggle" label="{lang('Show mouse mode buttons')}"
							 creationComplete="linkBindableProperty(showMouseModeControls, event.target, 'selected')"/>
				<ui:Indent label="{lang('Zoom controls location')}" translate="true" grouped="false"
						   visible="{mouseModeControlsToggle.selected || zoomControlsToggle.selected}"
						   includeInLayout="{mouseModeControlsToggle.selected || zoomControlsToggle.selected}">
					<ui:CustomComboBox id="maptoolLocationCombo" dataProvider="{locationsList}" change="locationChange()"/>
				</ui:Indent>
				<ui:Indent label="Zoom range" translate="true">
					<mx:NumericStepper minimum="-100" stepSize="1" creationComplete="linkBindableProperty(this.visualization.plotManager.minZoomLevel, event.target, 'value'); linkBindableProperty(this.visualization.plotManager.maxZoomLevel, event.target, 'maximum')"/>
					<mx:Label text="to"/>
					<mx:NumericStepper maximum="100" stepSize="1" creationComplete="linkBindableProperty(this.visualization.plotManager.maxZoomLevel, event.target, 'value'); linkBindableProperty(this.visualization.plotManager.minZoomLevel, event.target, 'minimum')"/>
				</ui:Indent>
				<ui:Indent label="Zoom factor" translate="true">
					<mx:NumericStepper maximum="10" minimum="1" stepSize=".25" creationComplete="linkBindableProperty(this.visualization.zoomFactor, event.target, 'value')"/>
					<ui:HelpComponent>
						Used for zoom +/- buttons, mouse wheel, and double-click.
					</ui:HelpComponent>
				</ui:Indent>
			</ui:CheckBoxWithNestedOptions>

			<mx:CheckBox label="{lang('Show map overview')}" id="overviewCheckBox"
						 creationComplete="linkBindableProperty(enableOverview, event.target, 'selected')"/>
			
			<mx:Spacer height="100%"/>
				
			<ui:Indent label="Coordinates at map center:" translate="true" grouped="false">
				<ui:Paragraph id="centerCoords" selectable="true"/>
			</ui:Indent>
		</mx:VBox>
		<mx:VBox label="{lang('Layer Visibility')}" verticalGap="10" id="visibleScaleRangesUI">
			<ui:Indent label="Current Zoom" translate="true" labelTextAlign="left" group="{scaleRangeIndentGroup}">
				<mx:HSlider id="scaleRangeTabZoomSlider" 
							width="100%" 
							tickInterval="1"
							change="handleZoomSliderChange(event);"
							minimum="{zoomSliderMinimum}"
							maximum="{zoomSliderMaximum}"
							liveDragging="true" />
			</ui:Indent>
			<mx:List id="visibleScaleRangesList"
								   width="100%" height="100%"
								   borderStyle="none"
								   paddingLeft="0">
				<mx:itemRenderer>
					<mx:Component>
						<ui:Indent labelTextAlign="left" group="{outerDocument.scaleRangeIndentGroup}" creationComplete="handleCreationComplete()">
							<mx:Script>
								<![CDATA[
									import mx.events.SliderEvent;
									
									import weave.api.getCallbackCollection;
									import weave.api.newLinkableChild;
									import weave.api.ui.IPlotTask;
									import weave.api.ui.IPlotter;
									import weave.compiler.StandardLib;
									import weave.core.LinkableWatcher;
									import weave.core.UIUtils;
									import weave.utils.ZoomUtils;
									import weave.visualization.layers.LayerSettings;
									import weave.visualization.layers.PlotManager;
									
									private var currentlyUpdatingLayerZoomRangeSlider:Boolean = false;
									
									private function handleCreationComplete():void
									{
										getCallbackCollection(pm.zoomBounds).addGroupedCallback(outerDocument, handleSettingsChange);
										getCallbackCollection(pm.minScreenSize).addGroupedCallback(outerDocument, handleSettingsChange);
										if (!settingsWatcher)
										{
											settingsWatcher = newLinkableChild(outerDocument, LinkableWatcher, handleSettingsChange, true);
											settingsWatcher.target = data as LayerSettings;
										}
									}
									
									private function get pm():PlotManager { return outerDocument.visualization.plotManager; }
									private function get settings():LayerSettings { return data as LayerSettings; }
									
									override public function set data(value:Object):void
									{
										if (settingsWatcher)
											settingsWatcher.target = value as LayerSettings;
										super.data = value as LayerSettings;
										handleSettingsChange();
									}
									
									private var settingsWatcher:LinkableWatcher = null;
									private function handleSettingsChange():void
									{
										if (!settings)
											return;
										
										label = outerDocument.getPlotterLabel(pm.plotters.getObject(pm.layerSettings.getName(settings)) as IPlotter);
										var area:Number = pm.fullDataBounds.getArea();
										if (!isNaN(area))
										{
											var minZoomLevel:Number = ZoomUtils.getZoomLevelFromScale(
												pm.fullDataBounds, pm.minScreenSize.value, settings.minVisibleScale.value
											);
											
											var maxZoomLevel:Number = ZoomUtils.getZoomLevelFromScale(
												pm.fullDataBounds, pm.minScreenSize.value, settings.maxVisibleScale.value
											);
											
											currentlyUpdatingLayerZoomRangeSlider = true;
											var newValues:Array = [minZoomLevel, maxZoomLevel];
											if (StandardLib.arrayCompare(layerZoomRangeSlider.values, newValues) == 0)
												layerZoomRangeSlider.values = [NaN, NaN];
											layerZoomRangeSlider.values = newValues;
											currentlyUpdatingLayerZoomRangeSlider = false;
										}
									}
									
									private function handleScaleSliderChange(event:SliderEvent):void
									{
										if (data && !currentlyUpdatingLayerZoomRangeSlider && UIUtils.hasFocus(layerZoomRangeSlider))
										{
											var minScreenSize:Number = pm.minScreenSize.value;
											var minVisibleZoomLevel:Number = layerZoomRangeSlider.values[0];
											var maxVisibleZoomLevel:Number = layerZoomRangeSlider.values[1];
											
											data.minVisibleScale.value = ZoomUtils.getScaleFromZoomLevel(
												pm.fullDataBounds, minScreenSize, minVisibleZoomLevel
											);
											
											data.maxVisibleScale.value = ZoomUtils.getScaleFromZoomLevel(
												pm.fullDataBounds, minScreenSize, maxVisibleZoomLevel
											);
										}
									}
								]]>
							</mx:Script>
							
							<mx:HSlider id="layerZoomRangeSlider"
										liveDragging="true"
										thumbCount="2"
										tickInterval="1"
										snapInterval="{outerDocument.zoomSliderSnapping}"
										showTrackHighlight="true" 
										minimum="{outerDocument.zoomSliderMinimum}" 
										maximum="{outerDocument.zoomSliderMaximum}"
										change="handleScaleSliderChange(event)"
										mouseDown="event.target.setFocus(); event.stopPropagation()"
										width="100%"/>
						</ui:Indent>
					</mx:Component>			
				</mx:itemRenderer>
			</mx:List>
		</mx:VBox>
	</ui:ControlPanel>
	<ui:IndentGroup id="scaleRangeIndentGroup"/>
	<mx:Number id="zoomSliderMinimum"/>
	<mx:Number id="zoomSliderMaximum"/>
	<mx:Number id="zoomSliderSnapping">0.25</mx:Number>
</SimpleVisTool>
